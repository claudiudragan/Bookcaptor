import numpy
import matplotlib
import matplotlib.pyplot as plt
from matplotlib.backends.backend_pdf import PdfPages
from PyPDF2 import PdfFileWriter, PdfFileReader, PdfFileMerger
from reportlab.pdfgen import canvas
from reportlab.lib.pagesizes import letter
import time
from os import remove
from modules.Name import Name
import textwrap

class Writer:
    def __init__(self, DocumentTermMatrix, log=False, name="default"):
        font = {
            'family' : 'Arial',
            'weight' : 'bold',
            'size'   : 15
        }

        matplotlib.rc('font', **font) 
        
        self.DTM = DocumentTermMatrix
        self.log = log
        self.name = name
        self.size = letter
        self.create_pdf()

    def make_histogram(self, doc_index, top=20):
        name = self.DTM.get_doc(doc_index).get_name()
        d = self.create_ordered(doc_index)
        values = [x[1] for x in d]
        keys = [x[0] for x in d]

        fig = plt.figure(figsize=(8.5, 11))
        ax = plt.subplot()
        ax.barh(keys[:top], values[:top], color="grey", edgecolor="black", height=0.6)
        ax.set_title("Word count histogram of: {0}".format(name))
        ax.invert_yaxis()
        ax.set_xlabel("Word count")

        return fig

    def histograms_to_pdf(self, top=20):
        beg = time.time()
        end = len(self.DTM.get_docs())
        pp = PdfPages("res/data/results/hists.pdf")

        for i in range(0, end):
            ax = self.make_histogram(i, top)
            pp.savefig(ax)
        pp.close()
        e = time.time()
        
        if self.log:
            print("[LOG] Created figures in {0:.2f}s".format(e - beg))

        merger = PdfFileMerger()
        merger.append("res/data/results/{0}_Title.pdf".format(self.name))
        merger.append("res/data/results/hists.pdf")
        merger.write("res/data/results/{0}_Output.pdf".format(self.name))
        merger.close()

        self.clean_files()

        if self.log:
            print("[LOG] Successfully histograms to res/data/results/{0}_Output.pdf".format(self.name))

    def merge_results(self, character=False):
        self.histograms_to_pdf()
        start = time.time()
        merger = PdfFileMerger()
        merger.append("res/data/results/{0}_Output.pdf".format(self.name))

        
        if character:
            PdfPath = "res/data/results/{0}_Char.pdf"
            end = len(self.DTM.get_docs())
            i = 2
            for doc in range(0, end):
                self.add_characters(doc)
                merger.merge(doc + i, PdfPath.format(doc))
                i += 2

        merger.write("res/data/results/{0}_Final.pdf".format(self.name))
        merger.close()

        finish = time.time()
        if self.log:
            print("[LOG] Finished final PDF in {0:.2f}s".format(finish - start))

    def add_characters(self, doc_index):
        def characters_wrap(canv, string):
            wrap = textwrap.wrap(string, width=90)
            i = 33
            for txt in wrap:
                canv.drawString(30, self.size[1] - i, txt)
                i += 12

        book_name = self.DTM.get_doc(doc_index).name
        names = Name(self.DTM.get_doc(doc_index), log=True)

        title = "Characters in {0}: ".format(book_name).replace("_", " ")
        can = canvas.Canvas("res/data/results/{0}_Char.pdf".format(doc_index), pagesize=letter)
        
        can.setFont("Helvetica-Bold", 11)
        can.drawString(20, self.size[1] - 20, title)

        can.setFont("Helvetica", 11)
        chars = ", ".join([x[0].strip() for x in names.count_names()])
        characters_wrap(can, chars)
      
        can.showPage()
        can.save()

        return can

    def clean_files(self):
        try:
            remove("res/data/results/{0}_Title.pdf".format(self.name))
        except OSError as e:
            print("{0} - {1}".format(e.filename, e.strerror))

        try:
            remove("res/data/results/hists.pdf")
        except OSError as e:
            print("{0} - {1}".format(e.filename, e.strerror))

    def create_ordered(self, doc_index):
        matrix = self.DTM.get_matrix()[doc_index]
        d = sorted(matrix.items(), key=lambda kv: kv[1], reverse=True)

        return d
    
    def create_pdf(self):
        title = "{0} Analysis Results".format(self.name)
        gener = "Generated by Bookcaptor"
        can = canvas.Canvas("res/data/results/{0}_Title.pdf".format(self.name), pagesize=letter)
        
        can.setFont("Helvetica-Bold", 28)
        can.setAuthor("Bookcaptor")
        can.setTitle(title)
        
        can.drawString((self.size[0] - can.stringWidth(title))/2, self.size[1] - 90, title.replace("_", " "))

        can.setFont("Helvetica", 18)
        can.drawString(((self.size[0] - can.stringWidth(gener))/2), self.size[1] - 118, gener)

        can.setFont("Helvetica", 10)
        can.drawString((self.size[0] - can.stringWidth("1"))/2, 30, "1")

        can.showPage()
        can.save()
